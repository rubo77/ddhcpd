#!/usr/bin/env bash

# Network test setup helper
# This script will construct a number of network namespaces and
# then create veth-pairs. One pair for server connections and another for
# client commands. Inside of the netns the client interface is named "client0"
# and the server interface "server0". 


NUM_OF_INTERFACE=$(cat /tmp/ddhcp-netns-count 2>/dev/null)
NUMBER_OF_CLIENT_INTERFACES=2

function isNumber(){
  local NUMBER=$1
  re='^[0-9]+$'
  if ! [[ $NUMBER =~ $re ]] ; then
    return 1
  else 
    return 0
  fi
}

function buildNS(){
  local NS_NAME="test$1"
  ip netns add "${NS_NAME}" 
  ip link set dev "server0" netns "$NS_NAME"
  ip netns exec "$NS_NAME" ip link set dev "server0" up
  ip link set dev "client0" netns "$NS_NAME"
  ip netns exec "$NS_NAME" ip link set dev "client0" up
  ip netns exec "$NS_NAME" ip a a 10.0.0.1/20 dev client0
  ip netns exec "$NS_NAME" ip link set dev lo up
  sleep 1
}

function destroyNS(){
  local NS_NAME="test$1"
  ip netns delete "${NS_NAME}" 
}

function buildInterfacePairs() {
  local IDX=$1
  ip link add name "srv${IDX}" type veth peer name "server0" type veth
  ip link add name "clt${IDX}" type veth peer name "client0" type veth
  for iface in "srv${IDX}" "server0" "clt${IDX}" "client0"; do
    ip link set dev "${iface}" up
  done 
  ip link add name br-clt${IDX} type bridge
  ip link set dev "clt${IDX}" master "br-clt${IDX}"
  ip link set dev br-clt${IDX} up
  for idc in $(seq 0 $NUMBER_OF_CLIENT_INTERFACES); do
    ip link add name "clt${IDX}-${idc}" type veth peer name "clb${IDX}-${idc}" type veth
    ip link set dev clt${IDX}-${idc} up 
    ip link set dev "clb${IDX}-${idc}" master "br-clt${IDX}"
    ip link set dev "clb${IDX}-${idc}" up
  done
}

function roamClientInterfaces() {
  local IDX=$1
  local IDT=$2
  for idc in $(seq 0 $NUMBER_OF_CLIENT_INTERFACES); do
    ip link set dev "clb${IDX}-${idc}" master "br-clt${IDT}"
  done
}

function destroyInterfacePairs() {
  local IDX=$1
  ip link delete dev "srv${IDX}" 
  ip link delete dev "clt${IDX}" 
  for idc in $(seq 0 $NUMBER_OF_CLIENT_INTERFACES); do
    ip link delete dev "clt${IDX}-${idc}" 
  done
  ip link delete dev br-clt${IDX} 
}

function startServer() {
  local NS_NAME="test$1"
  shift
  echo ip netns exec "${NS_NAME}" $@
  ip netns exec "${NS_NAME}" $@
}

function startDHCPClients() {
  local IDX="$1"
  shift
  local args="$@"
  for idc in $(seq 0 $NUMBER_OF_CLIENT_INTERFACES); do
    ( dhclient -4 -nw -d \
        -pf "/tmp/clt${IDX}-${idc}.pid" \
        -lf "/tmp/clt${IDX}-${idc}.lease" \
        $args \
        "clt${IDX}-${idc}" > "/tmp/dhclient-${IDX}-${idc}.log" 2>&1
    ) &
  done
}

function stopDHCPClients() {
  local IDX="$1"
  shift
  for idc in $(seq 0 $NUMBER_OF_CLIENT_INTERFACES); do
    ( dhclient -r \
        -pf "/tmp/clt${IDX}-${idc}.pid" \
        -lf "/tmp/clt${IDX}-${idc}.lease" >> "/tmp/dhclient-${IDX}-${idc}.log" 2>&1
      mv "/tmp/clt${IDX}-${idc}.lease" "/tmp/clt${IDX}-${idc}.lease.old"
    ) &
  done
}

function network-init() {
  local NUMBER_OF_INSTANCES="$1"

  echo -n "Building Network Namespaces "
  for index in $(seq 0 ${NUMBER_OF_INSTANCES}); do
    buildInterfacePairs "${index}"
    buildNS "${index}"
    #startServer "${index}" "${SERVER_BINARY}" &
    echo -n "."
  done
  echo " done"
  echo "$NUMBER_OF_INSTANCES" > /tmp/ddhcp-netns-count

  echo "Building server bridge"
  ip link add name br-srv type bridge
  ip link set dev br-srv up
  for index in $(seq 0 ${NUMBER_OF_INSTANCES}); do
    ip link set dev "srv${index}" master "br-srv"
  done
}

function network-stop() {
  echo "Destroy server bridge"
  ip link delete dev "br-srv"

  echo -n "Destroy Network Namespaces "
  for index in $(seq 0 ${NUM_OF_INTERFACE}); do
    destroyInterfacePairs "${index}"
    destroyNS "${index}"
    echo -n "."
  done
  echo " done"
  rm /tmp/ddhcp-netns-count
}

if [[ "$(id -u)" != "0" ]] ; then
  echo "Error: Need root privileges" 
  exit 1
fi

case "$1" in
  net-init)
    NUMBER_OF_INSTANCES="$2"
    isNumber "$NUMBER_OF_INSTANCES"
    if [[ $? -ne 0 ]] ; then
      echo "Error: '${NUMBER_OF_INSTANCES}' is not a number"
    fi
    network-init "$NUMBER_OF_INSTANCES"
    ;;
  net-stop)
    network-stop
    ;;
  srv-start)
    shift
    INDEX="$1"
    shift
    isNumber "$INDEX"
    if [[ $? -ne 0 ]] ; then
      echo "Error: '${NUMBER_OF_INSTANCES}' is not a index number"
    fi
    startServer "$INDEX" $@
    ;;
  clt-start)
    shift
    INDEX="$1"
    shift
    isNumber "$INDEX"
    if [[ $? -ne 0 ]] ; then
      echo "Error: '${NUMBER_OF_INSTANCES}' is not a index number"
    fi
    startDHCPClients "$INDEX" $@
  ;;
  clt-stop)
    shift
    INDEX="$1"
    shift
    isNumber "$INDEX"
    if [[ $? -ne 0 ]] ; then
      echo "Error: '${NUMBER_OF_INSTANCES}' is not a index number"
    fi
    stopDHCPClients "$INDEX" $@
  ;;
  test)
    # A test routine
    $0 net-init 1
    trap "pkill dhclient ; pkill ddhcpd ; rm /tmp/ddhcpd-ctl* ; $0 net-stop" EXIT
    # Start two daemons
    ( $0 srv-start 0 ./ddhcpd -t 20 -C /tmp/ddhcpd-ctl0 > /tmp/ddhcpd-0.log 2>&1 ) &
    ( $0 srv-start 1 ./ddhcpd -t 20 -C /tmp/ddhcpd-ctl1 > /tmp/ddhcpd-1.log 2>&1 ) &
    # Wait some seconds
    sleep 20
    # Start some clients 
    echo "Starting clients on realm 0"
    $0 clt-start 0 -v
    while :; do
      # Let Clients get a first lease in realm 0
      sleep 60 
      # Move Client Between Realms
      echo "Move Clients from Realm 0 to 1"
      roamClientInterfaces 0 1
      # Wait longer so clients refresh their lease in the other realm
      sleep 600
      # And Move them Back
      echo "Move Clients from Realm 1 back to 0"
      roamClientInterfaces 0 0
    done
    ;;
  *)
    echo "Usage: $0 <command> <parameter>"
    echo "where"
    echo " <command> is one of"
    echo " net-init  <#num>            - Initialize <#num> interface pairs and netns."
    echo " clt-start <index>           - Start $NUMBER_OF_CLIENT_INTERFACES clients for netns with <index>."
    echo " srv-start <index> <command> - Start <command> in netns with <index>."
    echo " net-stop                    - Destroy interface pairs and netns."
    echo " test                        - Run predefined test case. "
    ;;
esac


